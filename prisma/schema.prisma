// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart?
  orders    Order[]
  addresses Address[]
  reviews   Review[]
  
  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]
  
  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  price       Float
  salePrice   Float?
  sku         String   @unique
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants    ProductVariant[]
  images      ProductImage[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  
  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  size      String?
  color     String?
  stock     Int     @default(0)
  sku       String  @unique
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]
  
  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  position  Int     @default(0)
  createdAt DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_images")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    CartItem[]
  
  @@map("carts")
}

model CartItem {
  id             String  @id @default(cuid())
  cartId         String
  productId      String
  productVariantId String?
  quantity       Int     @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  cart           Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)
  
  @@map("cart_items")
}

model Order {
  id            String          @id @default(cuid())
  userId        String
  orderNumber   String          @unique
  status        OrderStatus     @default(PENDING)
  paymentStatus PaymentStatus   @default(PENDING)
  subtotal      Float
  shipping      Float           @default(0)
  tax           Float           @default(0)
  total         Float
  notes         String?
  addressId     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  payment   OrderPayment?
  address   Address?      @relation(fields: [addressId], references: [id], onDelete: SetNull)
  
  @@map("orders")
}

model OrderItem {
  id             String  @id @default(cuid())
  orderId        String
  productId      String
  productVariantId String?
  quantity       Int
  price          Float
  createdAt      DateTime @default(now())

  // Relations
  order          Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id], onDelete: SetNull)
  
  @@map("order_items")
}

model OrderPayment {
  id                String          @id @default(cuid())
  orderId           String          @unique
  method            PaymentMethod
  amount            Float
  transactionId     String?
  bankName          String?
  accountNumber     String?
  receiptImage      String?
  notes             String?
  verifiedAt        DateTime?
  verifiedBy        String?
  status            PaymentStatus   @default(PENDING)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_payments")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  type      AddressType
  firstName String
  lastName  String
  phone     String
  address   String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]
  
  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId])
  @@map("reviews")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum AddressType {
  SHIPPING
  BILLING
}